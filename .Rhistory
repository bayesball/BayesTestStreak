by = c("bat_id"))
}
out <- streaky_season(retro2016, 2016, 300)
head(out)
ggplot(out, aes(HR, S)) + geom_point()
filter(out, HR == 30)
source("~/Library/CloudStorage/Dropbox/2024 WORK/Kentucky work/streakiness/streaky_season.R", echo=TRUE)
streaky_season <- function(retro_data, season, minPA = 100){
streaks <- function(y) {
x <- rle(y)
class(x) <- "list"
as_tibble(x)
}
streaky_measure <- function(batter, retro_data) {
retro_data |>
filter(bat_id == batter, bat_event_fl == TRUE) |>
mutate(
HR = ifelse(event_cd == 23, 1, 0),
date = substr(game_id, 4, 12)
) |>
arrange(date) |>
pull(HR) |>
streaks() |>
filter(values == 0) |>
summarize(S = var(lengths) / mean(lengths) /
(mean(lengths) + 1))
}
players_minPA <- retro_data |>
filter(bat_event_fl == TRUE) |>
group_by(bat_id) |>
summarize(PA = n()) |>
filter(PA >= minPA) |>
pull(bat_id)
HR_minPA <- retro_data |>
filter(bat_event_fl == TRUE) |>
group_by(bat_id) |>
summarize(PA = n(),
HR = sum(event_cd == 23)) |>
filter(PA >= minPA)
reg_streaks <- players_minPA |>
set_names() |>
map(streaky_measure, retro_data) |>
list_rbind() |>
mutate(bat_id = players_minPA,
Season = season) |>
select(Season, bat_id, S)
inner_join(reg_streaks, HR_minPA,
by = c("bat_id")) |>
select(Season, bat_id, PA, HR, S)
}
out <- streaky_season(retro2016, 2016, 300)
head(out)
load("~/Library/CloudStorage/Dropbox/Google Drive/Retrosheet/pbp.2023.Rdata")
library(BayesTestStreak)
ks_id <-
People |>
filter(nameLast == "Schwarber", nameFirst == "Kyle") |>
pull(retroID)
d <- streak_data(ks_id, d2023, "HR")
sp <- find_spacings(d)
head(sp)
bayes_factor_logK(d)
bayes_factor_logK(d, 3)
geometric_plot(sp)
permutation_test(d)
1627.75 - 193.08 - 248.61 - 791.37 - 64.56
1627.75 - 193.08 - 248.61 - 791.37 - 64.56 + 3000 - 1079.01
lowercase("AAB")
lower.case("AAB")
library(stringr)
lower_case
str_to_lower("ABC")
load("~/Library/CloudStorage/Dropbox/Google Drive/Retrosheet/pbp.2023.Rdata")
dir()
source("streaky_season.R")
out <- streaky_season(d2023, 2023)
head(out)
hist(out$S)
ggplot(out,aes(HR, S)) + geom_point()
load("~/Library/CloudStorage/Dropbox/Google Drive/Retrosheet/pbp.2022.Rdata")
load("~/Library/CloudStorage/Dropbox/Google Drive/Retrosheet/pbp.2021.Rdata")
load("~/Library/CloudStorage/Dropbox/Google Drive/Retrosheet/pbp.2020.Rdata")
load("~/Library/CloudStorage/Dropbox/Google Drive/Retrosheet/pbp.2019.Rdata")
load("~/Library/CloudStorage/Dropbox/Google Drive/Retrosheet/pbp.2018.Rdata")
load("~/Library/CloudStorage/Dropbox/Google Drive/Retrosheet/pbp.2018.Rdata")
load("~/Library/CloudStorage/Dropbox/Google Drive/Retrosheet/pbp.2017.Rdata")
load("~/Library/CloudStorage/Dropbox/Google Drive/Retrosheet/pbp.2016.Rdata")
load("~/Library/CloudStorage/Dropbox/Google Drive/Retrosheet/pbp.2015.Rdata")
load("~/Library/CloudStorage/Dropbox/Google Drive/Retrosheet/pbp.2014.Rdata")
names(d2023)
names(pbp.14)
names(d2015)
d <- rbind(pbp.14,
d2015[, 2:98])
d1 <- rbind(pbp.14,
d2015[, 2:98],
d2016[, 2:98],
d2017[, 2:98],
d2018[, 2:98])
d2 <- rbind(
d2019[, 2:98],
d2020[, 2:98],
d2021[, 2:98],
d2022[, 2:98],
d2023[, 2:98]
)
d12 <- rbind(d1, d2x)
d12 <- rbind(d1, d2)
getwd()
save(d12, "pbp.2014.2023.Rdata")
save(d12, file = "pbp.2014.2023.Rdata")
load("~/Library/CloudStorage/Dropbox/Google Drive/Retrosheet/pbp.1954.1959.Rdata")
load("~/Library/CloudStorage/Dropbox/Google Drive/Retrosheet/pbp.1960.1979.Rdata")
load("~/Library/CloudStorage/Dropbox/Google Drive/Retrosheet/pbp.1980.1999.Rdata")
load("~/Library/CloudStorage/Dropbox/Google Drive/Retrosheet/pbp.2000.2013.Rdata")
load("~/Library/CloudStorage/Dropbox/Google Drive/Retrosheet/pbp.2014.2023.Rdata")
d12[1:5, 1]
substr(d12[1, 1], 4, 7)
names(d12)[1]
streaky_season <- function(retro_data, season, minPA = 100){
require(dplyr)
require(stringr)
names(retro_data) <- str_to_lower(names(retro_data))
retro_data <- filter(retro_data,
as.numeric(substr(game_id, 4, 7)) == season)
streaks <- function(y) {
x <- rle(y)
class(x) <- "list"
as_tibble(x)
}
streaky_measure <- function(batter, retro_data) {
retro_data |>
filter(bat_id == batter, bat_event_fl == TRUE) |>
mutate(
HR = ifelse(event_cd == 23, 1, 0),
date = substr(game_id, 4, 12)
) |>
arrange(date) |>
pull(HR) |>
streaks() |>
filter(values == 0) |>
summarize(S = var(lengths) / mean(lengths) /
(mean(lengths) + 1))
}
players_minPA <- retro_data |>
filter(bat_event_fl == TRUE) |>
group_by(bat_id) |>
summarize(PA = n()) |>
filter(PA >= minPA) |>
pull(bat_id)
HR_minPA <- retro_data |>
filter(bat_event_fl == TRUE) |>
group_by(bat_id) |>
summarize(PA = n(),
HR = sum(event_cd == 23)) |>
filter(PA >= minPA)
reg_streaks <- players_minPA |>
set_names() |>
map(streaky_measure, retro_data) |>
list_rbind() |>
mutate(bat_id = players_minPA,
Season = season) |>
select(Season, bat_id, S)
inner_join(reg_streaks, HR_minPA,
by = c("bat_id")) |>
select(Season, bat_id, PA, HR, S)
}
out <- streaky_season(d12, 2014)
head(out)
out <- streaky_season(d12, 2014, 200)
head(out)
OUT5 <- NULL
for (season in 2014:2023){
out <- streaky_season(d12, season, 200)
OUT5 <- rbind(OUT5, out)
print(season)
}
OUT4 <- NULL
for (season in 2000:2013){
out <- streaky_season(pbp.00.13, season, 200)
OUT4 <- rbind(OUT4, out)
print(season)
}
season
retro_data <- pbp.00.13
retro_data[1,]
season <- 2000
minPA <- 200
names(retro_data) <- str_to_lower(names(retro_data))
retro_data <- filter(retro_data,
as.numeric(substr(game_id, 4, 7)) == season)
retro_data <- dplyr::filter(retro_data,
as.numeric(substr(game_id, 4, 7)) == season)
retro_data <- dplyr::filter(retro_data,
as.numeric(substr(as.character(game_id), 4, 7))
== season)
names(retro_data)
str(retro_data)
retro_data[, 1] <- as.character(retro_data[, 1])
retro_data <- dplyr::filter(retro_data,
as.numeric(substr(game_id, 4, 7)) == season)
season
Season <- substr(retro_data$game_id, 4, 7)
table(Season)
retro_data <- subset(retro_data,
as.numeric(substr(retro_data$game_id, 4, 7)) == season)
retro_data |>
mutate(game_id = as.character(game_id),
Season = as.numeric(substr(game_id, 4, 7))) ->
retro_data
table(retro_data$Season)
str(retro_data$Season)
retro_data <- filter(retro_data, Season == season)
sum(retro_data$Season == 2000)
dim(filter(retro_data, Season == 2000))
retro_data <- filter(retro_data, Season == season)
year <- 2000
retro_data <- filter(retro_data, season == year)
print(dim(retro_data))
streaky_season <- function(retro_data, year, minPA = 100){
require(dplyr)
require(stringr)
names(retro_data) <- str_to_lower(names(retro_data))
retro_data |>
mutate(game_id = as.character(game_id),
season = as.numeric(substr(game_id, 4, 7))) ->
retro_data
retro_data <- filter(retro_data, season == year)
streaks <- function(y) {
x <- rle(y)
class(x) <- "list"
as_tibble(x)
}
streaky_measure <- function(batter, retro_data) {
retro_data |>
filter(bat_id == batter, bat_event_fl == TRUE) |>
mutate(
HR = ifelse(event_cd == 23, 1, 0),
date = substr(game_id, 4, 12)
) |>
arrange(date) |>
pull(HR) |>
streaks() |>
filter(values == 0) |>
summarize(S = var(lengths) / mean(lengths) /
(mean(lengths) + 1))
}
players_minPA <- retro_data |>
filter(bat_event_fl == TRUE) |>
group_by(bat_id) |>
summarize(PA = n()) |>
filter(PA >= minPA) |>
pull(bat_id)
HR_minPA <- retro_data |>
filter(bat_event_fl == TRUE) |>
group_by(bat_id) |>
summarize(PA = n(),
HR = sum(event_cd == 23)) |>
filter(PA >= minPA)
reg_streaks <- players_minPA |>
set_names() |>
map(streaky_measure, retro_data) |>
list_rbind() |>
mutate(bat_id = players_minPA,
Season = season) |>
select(Season, bat_id, S)
inner_join(reg_streaks, HR_minPA,
by = c("bat_id")) |>
select(Season, bat_id, PA, HR, S)
}
OUT4 <- NULL
for (season in 2000:2013){
out <- streaky_season(pbp.00.13, season, 200)
OUT4 <- rbind(OUT4, out)
print(season)
}
OUT3 <- NULL
for (season in 1980:1999){
out <- streaky_season(pbp.80.99, season, 200)
OUT3 <- rbind(OUT3, out)
print(season)
}
OUT2 <- NULL
for (season in 1960:1979){
out <- streaky_season(pbp.60.79, season, 200)
OUT2 <- rbind(OUT2, out)
print(season)
}
OUT1 <- NULL
for (season in 1954:1959){
out <- streaky_season(pbp.60.79, season, 200)
OUT1 <- rbind(OUT1, out)
print(season)
}
OUT1 <- NULL
for (season in 1954:1959){
out <- streaky_season(pbp5459, season, 200)
OUT1 <- rbind(OUT1, out)
print(season)
}
OUT <- rbind(OUT1, OUT2, OUT3, OUT4, OUT5)
table(OUT$Season)
People |>
filter(nameLast == "Aaron",
nameFirst == "Hank")
People |>
filter(nameLast == "Aaron",
nameFirst == "Hank") |>
pull(retroID) -> ha_id
head(OUT)
ggplot(filter(OUT, bat_id == ha_id),
aes(Season, S)) +
geom_point() +
geom_hline(yintercept = 1, color = "red")
People |>
filter(nameLast == "Schmidt",
nameFirst == "Mike") |>
pull(retroID) -> ms_id
ggplot(filter(OUT, bat_id == ms_id),
aes(Season, S)) +
geom_point() +
geom_hline(yintercept = 1, color = "red")
setwd("/Users/jimalbert/Library/CloudStorage/Dropbox/2024 WORK/Kentucky work/streakiness")
write_csv("OUT", "streaky_data.csv")
write_csv(OUT, "streaky_data.csv")
library(BayesTestStreak)
library(BayesTestStreak)
y <- c(0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0)
bayes.factor.function(y)
streak_data <- data.frame(N = 1:13,
Outcome = c(0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0))
streak_data
bayes_factor_logK(streak_data)
bayes_factor_logK(streak_data, 3)
head(dustin_streak)
dim(dustin_streak)
find_id("Mike Trout")
streak_data
find_spacings(streak_data)
spacings_data <- data.frame(N = 1:500,
Outcome = rgeom(500, prob = 0.5))
geometric_plot(spacings_data)
spacings_data <- data.frame(N = 1:500,
Spacing = rgeom(500, prob = 0.5))
geometric_plot(spacings_data)
spacings_data <- data.frame(N = 1:500,
Outcome = rgeom(500, prob = 0.5))
geometric_plot(spacings_data)
spacings_data <- data.frame(N = 1:500,
Spacing = rgeom(500, prob = 0.5))
geometric_plot(spacings_data)
lspacings1 <- data.frame(N = 1:500,
Spacing = rgeom(500, prob = 0.3),
BAT_ID = "player1")
spacings2 <- data.frame(N = 1:500,
Spacing = rgeom(500, prob = 0.6),
BAT_ID = "player2")
spacings_data <- rbind(spacings1, spacings2)
spacings1 <- data.frame(N = 1:500,
Spacing = rgeom(500, prob = 0.3),
BAT_ID = "player1")
spacings2 <- data.frame(N = 1:500,
Spacing = rgeom(500, prob = 0.6),
BAT_ID = "player2")
spacings_data <- rbind(spacings1, spacings2)
geometric_plot_compare(spacings_data)
streak_data <- data.frame(N = 1:500,
Outcome = rbinom(500, size=1, prob=0.3))
moving_average(streak_data)
streak_data <- data.frame(N = 1:500,
Outcome = rbinom(500, size=1, prob=0.3))
moving_average(streak_data) -> ma
moving_average_plot(ma)
streak_data <- data.frame(N = 1:500,
Outcome = rbinom(500, size=1, prob=0.3))
moving_average(streak_data, 70) -> ma
moving_average_plot(ma)
streak_data <- data.frame(N = 1:500,
Outcome = rgeom(500, prob=0.3))
permutation_test(streak_data)
streak_data <- data.frame(N = 1:500,
Outcome = rgeom(500, prob=0.3))
permutation_test(streak_data)
streak_data <- data.frame(N = 1:500,
Outcome = rgeom(500, prob=0.3))
permutation_test(streak_data)
streak_data <- data.frame(N = 1:500,
Outcome = rgeom(500, prob=0.3))
permutation_test(streak_data)
streak_data <- data.frame(N = 1:500,
Outcome = rbinom(500, size=1, prob=0.3))
plot_streak_data(streak_data)
random_streak()
random_streak(n = 40, p = 0.8)
head(pbp2026)
head(pbp2016)
head(dustin_streak)
table(dustin_streak$Season)
table(pbp2016$EVENT_CD)
head(pbp2016)
library(BayesTestStreak)
(ja <- find_id("Jose Abreu"))
ja_data <- filter(pbp2016,
BAT_ID == ja)
ja_data <- filter(pbp2016,
BAT_ID == ja)
head(ja_data)
ja_data |>
mutate(Date = ymd(substr(GAME_ID, 8, 11))) |>
arrange(Date, INN_CT) -> ja_data
ja_data |>
mutate(Date = substr(GAME_ID, 8, 11)) |>
arrange(Date, INN_CT) -> ja_data
ja_data |>
mutate(Date = substr(GAME_ID, 8, 11)) |>
arrange(Date, INN_CT) -> ja_date
ja_data |>
mutate(Date = substr(GAME_ID, 8, 11)) |>
arrange(Date, INN_CT) -> ja_data
head(ja_data)
ja_data <- filter(pbp2016,
BAT_ID == ja)
head(ja_data)
ja_data |>
mutate(Date = ymd(substr(GAME_ID, 4, 11))) |>
arrange(Date, INN_CT) -> ja_data
head(ja_data)
ja <- streak_data(pbp2016, ja, "H", AB = TRUE)
(ja_id <- find_id("Jose Abreu"))
ja_data <- filter(pbp2016,
BAT_ID == ja_id)
head(ja_data)
ja <- streak_data(pbp2016, ja_id, "H", AB = TRUE)
ja_id
pid <- ja_id
pbpdata <- pbp2016
AB = TRUE
eventcode <- "H"
# output is data frame
Flag <- 0
F1 <- is.numeric(eventcode)
if(F1 == FALSE){
F2 <- eventcode %in% c("H", "SO", "HR", "OB")
if(F2 == FALSE){
print("Invalid event code")
Flag <- 1}
}
if(F1 == TRUE) ecode <- eventcode
if(eventcode[1] == "H") ecode <- 20:23
if(eventcode[1] == "SO") ecode <-  3
if(eventcode[1] == "HR") ecode <- 23
if(eventcode[1] == "OB") ecode <- c(14:16, 20:23)
if(Flag == 0){
pbpdata <- dplyr::mutate(pbpdata,
Date=ymd(str_sub(GAME_ID, 4, 11)),
Game=str_sub(GAME_ID, 12, 12))
dplyr::filter(pbpdata,
BAT_ID == pid,
BAT_EVENT_FL == TRUE,
EVENT_CD != 17) %>%
dplyr::arrange(Date, Game, INN_CT) -> d
if(AB==TRUE){
d <- dplyr::filter(d, AB_FL==TRUE)
}
d %>%
mutate(Outcome = ifelse(EVENT_CD %in%
ecode, 1, 0),
N = row_number()) %>%
select(BAT_ID, N, GAME_ID, INN_CT, Outcome)
}
if(Flag == 0){
pbpdata <- dplyr::mutate(pbpdata,
Date=ymd(str_sub(GAME_ID, 4, 11)),
Game=str_sub(GAME_ID, 12, 12))
dplyr::filter(pbpdata,
BAT_ID == pid,
BAT_EVENT_FL == TRUE,
EVENT_CD != 17) %>%
dplyr::arrange(Date, Game, INN_CT) -> d
if(AB==TRUE){
d <- dplyr::filter(d, AB_FL==TRUE)
}
d %>%
mutate(Outcome = ifelse(EVENT_CD %in%
ecode, 1, 0),
N = row_number()) %>%
select(BAT_ID, N, GAME_ID, INN_CT, Outcome) -> d
dim(d)
sum(d == 1)
names(d)
streak_data(ja_id, pbp2016, "H", AB = TRUE) -> d
head(d)
ja_ma <- moving_average(ja_data, width = 20)
ja_data <- streak_data(ja_id, pbp2016, "H", AB = TRUE)
head(ja_data)
ja_ma <- moving_average(ja_data, width = 20)
head(ja_ma)
moving_average_plot(ja_ma)
moving_average_plot(ja_ma) +
ggtitle("Jose Abreu Moving AVG")
ja_sp <- find_spacings(ja_data)
head(ja_sp)
geometric_plot(ja_sp)
permutation_test(ja_data)
out <- bayes_factor_logK(ja_data)
head(out)
out <- bayes_factor_logK(ja_data)
head(out)
ggplot(out, aes(log_K, log_BF)) +
geom_line()
remotes::install_github("bayesball/BayesTestStreak")
names(ja_data)

group_by(BATTER_ID) %>%
summarize(IP = n()) -> summ2
inner_join(summ1, summ2, by = "BATTER_ID")  %>%
filter(IP.x >= n1, IP.y >= n2) %>%
pull(BATTER_ID) -> players
sc %>%
filter(YEAR == year1,
BATTER_ID %in% players) %>%
group_by(BATTER_ID) %>%
summarize(Year = first(YEAR), N = n(),
HR = sum(EVENT_DESC == "Home Run", na.rm = TRUE)) -> d1
sc %>%
filter(YEAR == year2,
BATTER_ID %in% players) %>%
group_by(BATTER_ID) %>%
summarize(Year = first(YEAR), N = n(),
HR = sum(EVENT_DESC == "Home Run", na.rm = TRUE)) -> d2
inner_join(d1, d2, by = "BATTER_ID")
}
dall <- compare(2018, 2019)
dall %>%
mutate(Rate.19 = HR.y / N.y,
Rate.18 = HR.x / N.x) -> dall
ggplot(dall, aes((Rate.18 + Rate.19) / 2,
Rate.19 - Rate.18)) +
geom_point() +
geom_hline(yintercept = 0, color = "red")
dall <- compare(2017, 2018, n1 = 200, n2 = 200)
dall %>%
mutate(Rate.18 = HR.y / N.y,
Rate.17 = HR.x / N.x) -> dall
ggplot(dall, aes((Rate.17 + Rate.18) / 2,
Rate.18 - Rate.17)) +
geom_point() +
geom_hline(yintercept = 0, color = "red")
dall <- compare(2016, 2017, n1 = 200, n2 = 200)
dall %>%
mutate(Rate.17 = HR.y / N.y,
Rate.16 = HR.x / N.x) -> dall
ggplot(dall, aes((Rate.16 + Rate.17) / 2,
Rate.17 - Rate.16)) +
geom_point() +
geom_hline(yintercept = 0, color = "red")
dall <- compare(2018, 2019)
dall %>%
mutate(Rate.19 = HR.y / N.y,
Rate.18 = HR.x / N.x) -> dall
ggplot(dall, aes((Rate.18 + Rate.19) / 2,
Rate.19 - Rate.18)) +
geom_point() +
geom_hline(yintercept = 0, color = "red")
dall %>%
summarize(L = sum(Rate.19 >  Rate.18)
N = n(),
dall %>%
summarize(L = sum(Rate.19 >  Rate.18),
N = n(),
P = L / N)
dall <- compare(2017, 2018, n1 = 200, n2 = 200)
dall %>%
mutate(Rate.18 = HR.y / N.y,
Rate.17 = HR.x / N.x) -> dall
ggplot(dall, aes((Rate.17 + Rate.18) / 2,
Rate.18 - Rate.17)) +
geom_point() +
geom_hline(yintercept = 0, color = "red")
dall %>%
summarize(L = sum(Rate.18 >  Rate.17),
N = n(),
P = L / N)
dall <- compare(2016, 2017, n1 = 200, n2 = 200)
dall %>%
mutate(Rate.17 = HR.y / N.y,
Rate.16 = HR.x / N.x) -> dall
ggplot(dall, aes((Rate.16 + Rate.17) / 2,
Rate.17 - Rate.16)) +
geom_point() +
geom_hline(yintercept = 0, color = "red")
dall %>%
summarize(L = sum(Rate.17 >  Rate.16),
N = n(),
P = L / N)
dall <- compare(2015, 2016, n1 = 200, n2 = 200)
dall %>%
mutate(Rate.16 = HR.y / N.y,
Rate.15 = HR.x / N.x) -> dall
ggplot(dall, aes((Rate.15 + Rate.16) / 2,
Rate.16 - Rate.15)) +
geom_point() +
geom_hline(yintercept = 0, color = "red")
dall %>%
summarize(L = sum(Rate.16 >  Rate.15),
N = n(),
P = L / N)
dall <- compare(2015, 2016, n1 = 200, n2 = 200)
dall %>%
mutate(Rate.16 = HR.y / N.y,
Rate.15 = HR.x / N.x) -> dall
ggplot(dall, aes((Rate.15 + Rate.16) / 2,
Rate.16 - Rate.15)) +
geom_point() +
geom_hline(yintercept = 0, color = "red")
dall %>%
summarize(L = sum(Rate.17 >  Rate.16),
N = n(),
P = L / N)
library(tidyverse)
library(mgcv)
library(CalledStrike)
sc <- read_csv("sc_08_29_19.csv")
compare <- function(year1, year2, n1 = 200, n2 = 150){
sc %>% filter(YEAR == year1) %>%
group_by(BATTER_ID) %>%
summarize(IP = n()) -> summ1
sc %>% filter(YEAR == year2) %>%
group_by(BATTER_ID) %>%
summarize(IP = n()) -> summ2
inner_join(summ1, summ2, by = "BATTER_ID")  %>%
filter(IP.x >= n1, IP.y >= n2) %>%
pull(BATTER_ID) -> players
sc %>%
filter(YEAR == year1,
BATTER_ID %in% players) %>%
group_by(BATTER_ID) %>%
summarize(Year = first(YEAR), N = n(),
HR = sum(EVENT_DESC == "Home Run", na.rm = TRUE)) -> d1
sc %>%
filter(YEAR == year2,
BATTER_ID %in% players) %>%
group_by(BATTER_ID) %>%
summarize(Year = first(YEAR), N = n(),
HR = sum(EVENT_DESC == "Home Run", na.rm = TRUE)) -> d2
inner_join(d1, d2, by = "BATTER_ID")
}
dall1 <- compare(2018, 2019)
dall1 %>%
mutate(Rate.19 = HR.y / N.y,
Rate.18 = HR.x / N.x) -> dall
ggplot(dall1, aes((Rate.18 + Rate.19) / 2,
Rate.19 - Rate.18)) +
geom_point() +
geom_hline(yintercept = 0, color = "red")
sc %>%
group_by(YEAR) %>%
summarize(N = n(),
HR = sum(EVENT_DESC == "Home Run", na.rm = TRUE),
Rate = 100 * HR / N)
year1 <-  2016
year2 <- 2017
sc %>% filter(YEAR == year1) %>%
group_by(BATTER_ID) %>%
summarize(IP = n()) -> summ1
sc %>% filter(YEAR == year2) %>%
group_by(BATTER_ID) %>%
summarize(IP = n()) -> summ2
sc %>% filter(YEAR == year1) %>%
group_by(BATTER_ID) %>%
summarize(IP = n(),
HR = sum(EVENT_DESC == "Home Run")) -> summ1
sc %>% filter(YEAR == year2) %>%
group_by(BATTER_ID) %>%
summarize(IP = n(),
HR = sum(EVENT_DESC == "Home Run")) -> summ2
head(summ1)
sum(summ1$HR)
sim(summ2$HR)
sum(summ2$HR)
median(summ1$HR / summ1$IP)
sum(summ1$HR) / sum(summ1$IP)
ggplot(summ1, aes(IP, HR / IP)) + geom_point()
ggplot(summ2, aes(IP, HR / IP)) + geom_point()
compare(2016, 2017, 100, 100) ->dall3
dall3 %>%
mutate(Rate.17 = HR.y / N.y,
Rate.16 = HR.x / N.x) -> dall3
ggplot(dall3, aes((Rate.16 + Rate.17) / 2,
Rate.17 - Rate.16)) +
geom_point() +
geom_hline(yintercept = 0, color = "red")
dall3 %>%
summarize(L = sum(Rate.17 >  Rate.16),
N = n(),
P = L / N)
head(dall3)
sum(dall3$HR.x)
sum(dall3$HR.y)
dall3 <- compare(2016, 2017, n1 = 200, n2 = 200)
dall3 %>%
mutate(Rate.17 = HR.y / N.y,
Rate.16 = HR.x / N.x) -> dall3
ggplot(dall3, aes((Rate.16 + Rate.17) / 2,
Rate.17 - Rate.16)) +
geom_point() +
geom_hline(yintercept = 0, color = "red")
sum(dall3$HR.y)
sum(dall3$HR.x)
dall3 <- compare(2016, 2017, 50, 50)
sum(dall3$HR.x)
sum(dall3$HR.y)
library(LearnBayes)
p <- seq(.01, .99, by = .02)
prior <- rep(.02, 50)
df <- data.frame(p, Prior = prior)
df$Likelihood <- dbinom(5, size = 20, prob = p)
df
df <- bayesian_crank(df)
library(ProbBayes)
df <- bayesian_crank(df)
prior_post_plot(df)
prior_post_plot(df, color = "blue")
prior_post_plot(df, Color = "blue")
?discint
discint(df[, c("p", "Posterior")])
names(df)
out <- as.matrix(df[, c("p", "Posterior")])
head(out)
distint(out)
discint(out)
discint(df[, c("p", "Posterior")], prob = 0.9)
setwd("~/Dropbox/BAYES BOOK")
setwd("~/Dropbox/BAYES BOOK/FINAL CODE & DATA")
setwd("~/Dropbox/BAYES BOOK/FINAL CODE & DATA/chapter 2-3")
f <- data.frame(Card = c("Blue", "Blue",
"Pink", "Pink",
"Mixed", "Mixed"),
Side = c("Blue", "Blue",
"Pink", "Pink",
"Blue", "Pink"))
cards <- df[sample(6, size = 1000, replace = TRUE), ]
table(cards$Card, cards$Side)
df <- data.frame(Card = c("Blue", "Blue",
"Pink", "Pink",
"Mixed", "Mixed"),
Side = c("Blue", "Blue",
"Pink", "Pink",
"Blue", "Pink"))
cards <- df[sample(6, size = 1000, replace = TRUE), ]
table(cards$Card, cards$Side)
set.seed(123)
df <- data.frame(Card = c("Blue", "Blue",
"Pink", "Pink",
"Mixed", "Mixed"),
Side = c("Blue", "Blue",
"Pink", "Pink",
"Blue", "Pink"))
cards <- df[sample(6, size = 1000, replace = TRUE), ]
table(cards$Card, cards$Side)
set.seed(123)
Bowl <- sample(1:2, size = 1000, replace = TRUE,
prob = c(1, 3) / 4)
Color_1 <- sample(c("white", "black"), size = 1000,
replace = TRUE,
prob = c(1, 5) / 6)
Color_2 <- sample(c("white", "black"), size = 1000,
replace = TRUE,
prob = c(4, 2) / 6)
Color <- ifelse(Bowl == 1, Color_1, Color_2)
table(Bowl, Color)
setwd("~/Dropbox/BAYES BOOK/FINAL CODE & DATA/chapter 4")
setwd("~/Dropbox/BAYES BOOK/FINAL CODE & DATA/chapter 5")
n <- 100
p <- 0.1
mu <- n * p
sigma <- sqrt(n * p * (1 - p))
mu
sigma
pnorm(5, mu, sigma) - pnorm(0, mu, sigma)
x <- c(2,5,8,14,18)
p <- c(.15, .35, .2, .15, .15)
sum(p)
sample(x, size = 10, prob = p, replace = TRUE)
setwd("~/Dropbox/BAYES BOOK/FINAL CODE & DATA/chapter 6")
factorial(10) / (factorial(3) * factorial(5) * factorial(2)) *
(1 / 6) ^ 3 * (2 / 6) ^ 5 * (3 / 6) ^ 2
setwd("~/Dropbox/BAYES BOOK/FINAL CODE & DATA/chapter 7/scripts")
setwd("~/Dropbox/BAYES BOOK/FINAL CODE & DATA/chapter 6")
setwd("~/Dropbox/BAYES BOOK/FINAL CODE & DATA/chapter 7")
setwd("~/Dropbox/BAYES BOOK/FINAL CODE & DATA/chapter 7/scripts")
setwd("~/Dropbox/BAYES BOOK/FINAL CODE & DATA/chapter 8/scripts")
library(tidyverse)
fab4 <- read_csv("https://raw.githubusercontent.com/bayesball/ComputingWithData/master/beatles_songs_durations.csv")
head(fab4)
fab4 %>%
mutate(Nchar = nchar(Title)) -> fab4
head(fab4)
fab4 %>% arrange(desc(Nchar)) %>% head()
fab4 %>% arrange(desc(Nchar)) %>% tail()
setwd("~/Dropbox/2018 WORK/HR paper/MLBnew")
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
library(tidyverse)
library(mgcv)
library(CalledStrike)
sc <- read_csv("sc_08_29_19.csv")
sc %>%
group_by(PARK) %>%
summarize(N = n(),
HR = sum(EVENT_DESC == "Home Run", na.rm = TRUE),
Rate = 100 * HR / N)
sc %>%
group_by(YEAR, PARK) %>%
summarize(N = n(),
HR = sum(EVENT_DESC == "Home Run", na.rm = TRUE),
Rate = 100 * HR / N) -> park
ggplot(park, aes(PARK, Rate)) +
geom_point() + coord_flip() +
facet_wrap(~ YEAR)
sc %>%
filter(YEAR == 2018) %>%
group_by(PARK) %>%
summarize(N = n(),
HR = sum(EVENT_DESC == "Home Run", na.rm = TRUE),
Rate = 100 * HR / N) -> s1
sc %>%
filter(YEAR == 2018) %>%
group_by(PARK) %>%
summarize(N = n(),
HR = sum(EVENT_DESC == "Home Run", na.rm = TRUE),
Rate = 100 * HR / N) -> s1
sc %>%
filter(YEAR == 2019) %>%
group_by(PARK) %>%
summarize(N = n(),
HR = sum(EVENT_DESC == "Home Run", na.rm = TRUE),
Rate = 100 * HR / N) -> s2
s12 <- inner_join(s1, s2, by = "PARK")
head(s12)
ggplot(s12, aes((Rate.x + Rate.y) / 2,
Rate.y - Rate.x)) +
geom_point()
park  <- function(year1, year2){
sc %>%
filter(YEAR == year1) %>%
group_by(PARK) %>%
summarize(N = n(),
HR = sum(EVENT_DESC == "Home Run", na.rm = TRUE),
Rate = 100 * HR / N) -> s1
sc %>%
filter(YEAR == year2) %>%
group_by(PARK) %>%
summarize(N = n(),
HR = sum(EVENT_DESC == "Home Run", na.rm = TRUE),
Rate = 100 * HR / N) -> s2
s12 <- inner_join(s1, s2, by = "PARK")
ggplot(s12, aes((Rate.x + Rate.y) / 2,
Rate.y - Rate.x)) +
geom_point() +
ggtitle(paste(year1, "compared to", year2)) +
centertitle() + increasefont()
}
park(2018, 2019)
park(2015, 2016)
park(2016, 2017)
park(2017, 2018)
park  <- function(year1, year2){
sc %>%
filter(YEAR == year1) %>%
group_by(PARK) %>%
summarize(N = n(),
HR = sum(EVENT_DESC == "Home Run", na.rm = TRUE),
Rate = 100 * HR / N) -> s1
sc %>%
filter(YEAR == year2) %>%
group_by(PARK) %>%
summarize(N = n(),
HR = sum(EVENT_DESC == "Home Run", na.rm = TRUE),
Rate = 100 * HR / N) -> s2
s12 <- inner_join(s1, s2, by = "PARK")
print(sd(s12$Rate.y - s12$Rate.x))
ggplot(s12, aes((Rate.x + Rate.y) / 2,
Rate.y - Rate.x)) +
geom_point() +
ggtitle(paste(year1, "compared to", year2)) +
centertitle() + increasefont()
}
park(2018, 2019)
park  <- function(year1, year2, plot = TRUE){
sc %>%
filter(YEAR == year1) %>%
group_by(PARK) %>%
summarize(N = n(),
HR = sum(EVENT_DESC == "Home Run", na.rm = TRUE),
Rate = 100 * HR / N) -> s1
sc %>%
filter(YEAR == year2) %>%
group_by(PARK) %>%
summarize(N = n(),
HR = sum(EVENT_DESC == "Home Run", na.rm = TRUE),
Rate = 100 * HR / N) -> s2
s12 <- inner_join(s1, s2, by = "PARK")
p <- ggplot(s12, aes((Rate.x + Rate.y) / 2,
Rate.y - Rate.x)) +
geom_point() +
ggtitle(paste(year1, "compared to", year2)) +
centertitle() + increasefont()
ifelse(plot == TRUE,  p, s12)
}
park(2018, 2019)
park  <- function(year1, year2, plot = TRUE){
sc %>%
filter(YEAR == year1) %>%
group_by(PARK) %>%
summarize(N = n(),
HR = sum(EVENT_DESC == "Home Run", na.rm = TRUE),
Rate = 100 * HR / N) -> s1
sc %>%
filter(YEAR == year2) %>%
group_by(PARK) %>%
summarize(N = n(),
HR = sum(EVENT_DESC == "Home Run", na.rm = TRUE),
Rate = 100 * HR / N) -> s2
s12 <- inner_join(s1, s2, by = "PARK")
p <- ggplot(s12, aes((Rate.x + Rate.y) / 2,
Rate.y - Rate.x)) +
geom_point() +
ggtitle(paste(year1, "compared to", year2)) +
centertitle() + increasefont()
if(plot == TRUE) out <- p else out <- s12
out
}
park(2018, 2019)
park(2018, 2019, plot = FALSE)
park  <- function(year1, year2, plot = TRUE){
sc %>%
filter(YEAR == year1) %>%
group_by(PARK) %>%
summarize(N = n(),
HR = sum(EVENT_DESC == "Home Run", na.rm = TRUE),
Rate = 100 * HR / N) -> s1
sc %>%
filter(YEAR == year2) %>%
group_by(PARK) %>%
summarize(N = n(),
HR = sum(EVENT_DESC == "Home Run", na.rm = TRUE),
Rate = 100 * HR / N) -> s2
s12 <- inner_join(s1, s2, by = "PARK")
s12$Comparison  <- paste(year1, "/" year2)
park  <- function(year1, year2, plot = TRUE){
sc %>%
filter(YEAR == year1) %>%
group_by(PARK) %>%
summarize(N = n(),
HR = sum(EVENT_DESC == "Home Run", na.rm = TRUE),
Rate = 100 * HR / N) -> s1
sc %>%
filter(YEAR == year2) %>%
group_by(PARK) %>%
summarize(N = n(),
HR = sum(EVENT_DESC == "Home Run", na.rm = TRUE),
Rate = 100 * HR / N) -> s2
s12 <- inner_join(s1, s2, by = "PARK")
s12$Comparison  <- paste(year1, "/", year2)
p <- ggplot(s12, aes((Rate.x + Rate.y) / 2,
Rate.y - Rate.x)) +
geom_point() +
ggtitle(paste(year1, "compared to", year2)) +
centertitle() + increasefont()
if(plot == TRUE) out <- p else out <- s12
out
}
park(2018, 2019, plot = FALSE)
out1 <- park(2018, 2019, plot = FALSE)
out2 <- park(2015, 2016, plot = FALSE)
out3 <- park(2016, 2017, plot = FALSE)
out4 <- park(2017, 2018, plot = FALSE)
all_out <- rbind(out1, out2, out3, out4)
all_out <- rbind(out1, out2, out3, out4)
ggplot(all_out, aes((Rate.x + Rate.y) / 2,
Rate.y - Rate.x)) +
facet_wrap(~ Comparison)
all_out <- rbind(out1, out2, out3, out4)
ggplot(all_out, aes((Rate.x + Rate.y) / 2,
Rate.y - Rate.x)) +
geom_point() +
facet_wrap(~ Comparison)
all_out <- rbind(out1, out2, out3, out4)
ggplot(all_out, aes((Rate.x + Rate.y) / 2,
Rate.y - Rate.x)) +
geom_point() +
facet_wrap(~ Comparison) +
ylim(-1.3, 2.5)
all_out <- rbind(out1, out2, out3, out4)
ggplot(all_out, aes((Rate.x + Rate.y) / 2,
Rate.y - Rate.x)) +
geom_point() +
facet_wrap(~ Comparison) +
ylim(-1.3, 2.5) +
geom_hline(yintercept = 0, color = "red")
library(tidyverse)
trout2 <- data.frame(
plate_x = c(0.1192, 0.9157, 0.2773, 0.196, 0.0644, 0.2778, -0.5606,
0.5528, -1.0238, -0.851, -0.543, -1.0777, 0.0692,
-0.4058, 0.0713, -0.1606, -0.7886, -0.5532, -0.8195,
-0.1446),
plate_z = c(2.2668, 1.8246, 3.109, 2.1833, 2.7671, 2.4155, 1.6468, 2.5869,
2.2879, 1.5195, 1.3827, 2.364, 1.931, 1.8966,
1.209, 1.6613, 2.4813, 2.2946, 1.3726, 2.7023)
)
x <- c(-.95, .95, .95, -.95, -.95)
z <- c(1.6, 1.6, 3.5, 3.5, 1.6)
sz <- data.frame(x,z)
ggplot()+geom_path(data=sz, aes(x=x,y=z))+ coord_equal()+geom_path(data=xxx, aes(x=xx,y=zz))+
stat_density2d(data=trout2,aes(x = plate_x, y = plate_z, fill = as.numeric(..level..)),
bins=5, geom = "polygon", ) +
geom_point(data=trout2,aes(x = plate_x, y = plate_z), color="yellow") +
xlab("plate_x")+ylab("plate_z")+xlim(-2,2)+ylim(0,4)+scale_fill_viridis_c(option="plasma")
ggplot()+geom_path(data=sz, aes(x=x,y=z))+ coord_equal()+
stat_density2d(data=trout2,aes(x = plate_x, y = plate_z, fill = as.numeric(..level..)),
bins=5, geom = "polygon", ) +
geom_point(data=trout2,aes(x = plate_x, y = plate_z), color="yellow") +
xlab("plate_x")+ylab("plate_z")+xlim(-2,2)+ylim(0,4)+scale_fill_viridis_c(option="plasma")

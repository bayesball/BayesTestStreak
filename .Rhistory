sum(AB[indices]))
}
P <- data.frame(t(sapply(1: (N - width + 1), mavg)))
names(P) <- c("AB", "Average")
P
}
y_ma <- moving.average(y,
rep(1, length(y)), width)
AVG <- mean(y)
y_ma$Deviation <- y_ma$Average - AVG
p <- ggplot(y_ma, aes(x=AB, y=Deviation)) +
geom_area(fill="blue") +
geom_hline(yintercept=0) +
theme_minimal()
p
}
p1 <- mavg_plot(rbinom(500, size=1, prob=.3), width=25)
p2 <- mavg_plot(rbinom(500, size=1, prob=.3), width=25)
p3 <- mavg_plot(rbinom(500, size=1, prob=.3), width=25)
p4 <- mavg_plot(rbinom(500, size=1, prob=.3), width=25)
SIM <- rbind(data.frame(Simulation=1, p1$data),
data.frame(Simulation=2, p2$data),
data.frame(Simulation=3, p3$data),
data.frame(Simulation=4, p4$data))
ggplot(SIM, aes(AB, Deviation)) +
geom_area(fill="blue") +
facet_wrap(~ Simulation, ncol=2)
ggplot(SIM, aes(AB, Deviation)) +
geom_area(fill="blue") +
facet_wrap(~ Simulation, ncol=2) +
theme_minimal()
ggplot(SIM, aes(AB, Deviation)) +
geom_area(fill="blue") +
facet_wrap(~ Simulation, ncol=2) +
theme_bw()
p1 <- mavg_plot(rbinom(500, size=1, prob=.3), width=25)
p2 <- mavg_plot(rbinom(500, size=1, prob=.3), width=25)
p3 <- mavg_plot(rbinom(500, size=1, prob=.3), width=25)
p4 <- mavg_plot(rbinom(500, size=1, prob=.3), width=25)
SIM <- rbind(data.frame(Simulation=1, p1$data),
data.frame(Simulation=2, p2$data),
data.frame(Simulation=3, p3$data),
data.frame(Simulation=4, p4$data))
ggplot(SIM, aes(AB, Deviation)) +
geom_area(fill="blue") +
facet_wrap(~ Simulation, ncol=2) +
theme_bw()
SIM <- rbind(data.frame(Simulation="Simulation 1", p1$data),
data.frame(Simulation="Simulation 2", p2$data),
data.frame(Simulation="Simulation 3", p3$data),
data.frame(Simulation="Simulation 4", p4$data))
ggplot(SIM, aes(AB, Deviation)) +
geom_area(fill="blue") +
facet_wrap(~ Simulation, ncol=2) +
theme_bw()
mavg_plot(dustin2012$Outcome, width=40)
install.packages(c("assertthat", "bayesplot"), lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("zoo", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("jsonlite", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
getwd()
.Library
.Rprofile
R.home(component = "home")
cd("/Library/Frameworks/R.framework/Resources")
setwd("/Library/Frameworks/R.framework/Resources")
dir()
setwd("~/Dropbox/2016 WORK/CH stats literacy/WORK/7 FANGRAPHS")
setwd("~/Dropbox/2016 WORK/CH stats literacy/WORK/5 PITCHFX/WORK")
load("../pitchfx2016/april.Rdata")
load("../pitchfx2016/may.Rdata")
load("../pitchfx2016/june.Rdata")
load("../pitchfx2016/july.Rdata")
load("../pitchfx2016/aug.Rdata")
load("../pitchfx2016/sep.Rdata")
list_arrays<- ls()
?get
names(april_1$atbat)
collect_data <- function(Array){
require(dplyr)
Array <- get(Array)
locations <- select(Array$pitch,
px, pz, des, num, gameday_link)
names <- select(Array$atbat, pitcher, batter,
num, gameday_link)
inner_join(locations, names,
by = c("num", "gameday_link"))
}
d <- collect_data(april_1)
collect_data <- function(Array){
require(dplyr)
locations <- select(Array$pitch,
px, pz, des, num, gameday_link)
names <- select(Array$atbat, pitcher, batter,
num, gameday_link)
inner_join(locations, names,
by = c("num", "gameday_link"))
}
d <- collect_data(april_1)
head(d)
summary(d)
head(d)
d[1000:1005,]
collect_data <- function(Array){
require(dplyr)
locations <- select(Array$pitch,
px, pz, des, num, gameday_link)
names <- select(Array$atbat, pitcher, batter,
pitcher_name, batter_name,
num, gameday_link)
inner_join(locations, names,
by = c("num", "gameday_link"))
}
d <- collect_data(april_1)
d[1000,]
CollectData <- function(list_arrays, pitcher){
require(dplyr)
collect_data <- function(Array){
require(dplyr)
locations <- select(Array$pitch,
px, pz, des, num, gameday_link)
names <- select(Array$atbat, pitcher, batter,
pitcher_name, batter_name,
num, gameday_link)
inner_join(locations, names,
by = c("num", "gameday_link"))
}
S <- lapply(list_arrays[Ck > 0], collect_data)
bind_rows(S)
}
CollectData <- function(list_arrays){
require(dplyr)
collect_data <- function(Array){
require(dplyr)
locations <- select(Array$pitch,
px, pz, des, num, gameday_link)
names <- select(Array$atbat, pitcher, batter,
pitcher_name, batter_name,
num, gameday_link)
inner_join(locations, names,
by = c("num", "gameday_link"))
}
S <- lapply(list_arrays[Ck > 0], collect_data)
bind_rows(S)
}
dd <- CollectData(list(april_1, april_2))
CollectData <- function(list_arrays){
require(dplyr)
collect_data <- function(Array){
require(dplyr)
locations <- select(Array$pitch,
px, pz, des, num, gameday_link)
names <- select(Array$atbat, pitcher, batter,
pitcher_name, batter_name,
num, gameday_link)
inner_join(locations, names,
by = c("num", "gameday_link"))
}
S <- lapply(list_arrays, collect_data)
bind_rows(S)
}
dd <- CollectData(list(april_1, april_2))
dd[20000,]
All_Data <- CollectData(list_arrays, collect_data)
All_Data <- CollectData(list_arrays)
list_arrays
CollectData <- function(list_arrays){
require(dplyr)
collect_data <- function(Array){
Array <- get(Array)
require(dplyr)
locations <- select(Array$pitch,
px, pz, des, num, gameday_link)
names <- select(Array$atbat, pitcher, batter,
pitcher_name, batter_name,
num, gameday_link)
inner_join(locations, names,
by = c("num", "gameday_link"))
}
S <- lapply(list_arrays, collect_data)
bind_rows(S)
}
All_Data <- CollectData(list_arrays)
TT <- table(All_Data$batter)
TT
list_arrays
summary(All_Data)
library(mutate)
library(dplyr)
no.swing <- c("Ball", "Ball In Dirt", "Called Strike",
"Hit By Pitch",
"Intent Ball", "Pitchout",
"Automatic Ball")
swing.no.contact <- c("Swinging Strike",
"Swinging Strike (Blocked)"
"Missed Bunt")
swing.no.contact <- c("Swinging Strike",
"Swinging Strike (Blocked)",
"Missed Bunt")
topKzone <- 3.5
botKzone <- 1.6
inKzone <- -0.85
outKzone <- 0.85
5.1/2
names(All_Data)
All_Data <- mutate(All_Data,
Zone=ifelse(abs(px) < 0.85 &
abs(pz - 2.55) < 0.95), 1, 0),
Swing=ifelse(des %in% no.swing, 0, 1),
Swing.No.Contact=ifelse(des %in%
swing.no.contact, 1, 0))
All_Data <- mutate(All_Data,
Zone=ifelse(abs(px) < 0.85 &
abs(pz - 2.55) < 0.95, 1, 0),
Swing=ifelse(des %in% no.swing, 0, 1),
Swing.No.Contact=ifelse(des %in%
swing.no.contact, 1, 0))
F <- filter(All_Data, Swing==1, Swing.No.Contact==0)
F[1:4,]
F <- filter(All_Data, Swing==0)
F[1000:1002,]
F <- filter(All_Data, Swing==1, Swing.No.Contact==1)
F[1000:1002,]
mean(All_Data$Swing)
sum(All_Data$Swing * All_Data$Zone) / sum(All_Data$Zone)
sum(All_Data$Swing * All_Data$Zone, na.rm=TRUE) /
sum(All_Data$Zone, na.rm=TRUE)
sum(All_Data$Swing * (1 - All_Data$Zone), na.rm=TRUE) /
sum((1 - All_Data$Zone), na.rm=TRUE)
sum(All_Data$Swing * (1 - All_Data$Swing.No.Contact)) /
sum(All_Data$Swing)
sum(All_Data$Swing * (1 - All_Data$Swing.No.Contact) *
All_Data$Zone, na.rm=TRUE) /
sum(All_Data$Swing * All_Data$Zone, na.rm=TRUE)
sum(All_Data$Swing * (1 - All_Data$Swing.No.Contact) *
(1 - All_Data$Zone), na.rm=TRUE) /
sum(All_Data$Swing *
(1 - All_Data$Zone), na.rm=TRUE)
mean(All_Data$Zone, na.rm=TRUE)
S1 <- summarize(group_by(All_Data, batter_name),
y=sum(Swing), N=n())
head(S1)
require(LearnBayes)
fit <- laplace(betabinexch, S1, c(0, 0))
fit <- laplace(betabinexch, S1[, -1], c(0, 0))
fit <- laplace(betabinexch, as.matrix(S1[, -1]), c(0, 0))
str(S1)
fit <- laplace(betabinexch,
cbind(S1$y, S1$N), c(0, 0))
d <- cbind(S1$y, S1$N)
head(d)
betabinexch
fit <- laplace(betabinexch,
cbind(S1$y, S1$N), c(0, 0))
d <- cbind(S1$y, S1$N)
?laplace
fit <- laplace(betabinexch, c(0, 0), cbind(S1$y, S1$N))
fit$mode
hist(S1$N)
exp(4.58)
S2 <- summarize(group_by(All_Data, batter_name),
y=sum(Swing * (1 - Swing.No.Contact)),
N=sum(Swing))
hist(S2$N)
fit1 <- laplace(betabinexch, c(0, 0), cbind(S1$y, S1$N))
fit2 <- laplace(betabinexch, c(0, 0), cbind(S2$y, S2$N))
fit1
fit1$mode
fit2$mode
?complete.cases
S2 <- summarize(group_by(filter(All_Data,
complete.cases(All_Data) == TRUE),
batter_name),
y=sum(Zone), N=n())
head(S2)
S3 <- summarize(group_by(filter(All_Data,
complete.cases(All_Data) == TRUE),
batter_name),
y=sum(Zone), N=n())
fit3 <- laplace(betabinexch, c(0, 0), cbind(S3$y, S3$N))
fit3$mode
exp(5.94)
S1 <- summarize(group_by(All_Data, batter_name),
y=sum(Swing), N=n())
require(LearnBayes)
S2 <- summarize(group_by(All_Data, batter_name),
y=sum(Swing * (1 - Swing.No.Contact)),
N=sum(Swing))
library(dplyr)
S12 <- inner_join(S1, S2, by="batter_name")
head(S12)
sum(S12$N.x >= 300)
sum(S12$N.x >= 500)
sum(S12$N.x >= 800)
sum(S12$N.x >= 1000)
sum(S12$N.x >= 1500)
ggplot2(filter(S12, N.x >= 1500),
aes(y.x / N.x, y.y / N.y)) +
geom_point()
library(ggplot2)
library(dplyr)
S12 <- inner_join(S1, S2, by="batter_name")
ggplot2(filter(S12, N.x >= 1500),
aes(y.x / N.x, y.y / N.y)) +
geom_point()
ggplot(filter(S12, N.x >= 1500),
aes(y.x / N.x, y.y / N.y)) +
geom_point()
ggplot(filter(S12, N.x >= 1500),
aes(y.x / N.x, y.y / N.y)) +
geom_point() +
geom_smooth()
104714*.25 - 8457.5
18579.41 - 17721
3231,96 + .04597 * (142573 - 105300)
3231.96 + .04597 * (142573 - 105300)
4945 * .05
4945 - 247
library(readr)
fg <- read_csv("fg2016.csv")
fg[1,]
names(S12)
S12a <- inner_join(S12, fg,
by=c("batter_name"="Name"))
View(S12a)
names(S12a)
fg <- read_csv("fg2016.csv")
S12a <- inner_join(S12, fg,
by=c("batter_name"="Name"))
fit <- lm(K ~ I(y.x / N.x) + I(y.y / N.y), data=S12a)
fit
inner_join(S1, S2, by="batter_name") %>%
mutate(Swing_Rate = y.x / N.x,
Contact_Rate = y.y / N.y) %>% S12
inner_join(S1, S2, by="batter_name") %>%
mutate(Swing_Rate = y.x / N.x,
Contact_Rate = y.y / N.y) -> S12
ggplot(filter(S12, N.x >= 1500),
aes(Swing_Rate, Contact_Rate)) +
geom_point() +
geom_smooth()
S12a <- inner_join(S12, fg,
by=c("batter_name"="Name"))
fit <- lm(K ~ Swing_Rate + Contact_Rate, data=S12a)
summary(fit)
names(S12a)
sum(S12a$Nx >= 500)
sum(S12a$N.x >= 500)
sum(S12a$N.x >= 1000)
sum(S12a$N.x >= 2000)
fit <- lm(K ~ Swing_Rate + Contact_Rate,
data=filter(S12a, N.x >= 2000))
summary(fit)
names(S12a)
pairs(select(S12a, Swing_Rate, Contact_Rate, K))
View(S12a)
pairs(select(S12a, Swing_Rate, Contact_Rate, BB))
pairs(select(filter(S12a, N.x >= 2000),
Swing_Rate, Contact_Rate, K))
pairs(select(filter(S12a, N.x >= 2000),
S12a, Swing_Rate, Contact_Rate, BB))
pairs(select(filter(S12a, N.x >= 2000),
Swing_Rate, Contact_Rate, BB))
library(GGally)
ggpairs(select(filter(S12a, N.x >= 2000),
Swing_Rate, Contact_Rate, K))
ggpairs(select(filter(S12a, N.x >= 2000),
Swing_Rate, Contact_Rate, BB))
ggpairs(select(filter(S12a, N.x >= 2000),
Swing_Rate, Contact_Rate, K),
lower=list(continuous="smooth"))
ggpairs(select(filter(S12a, N.x >= 2000),
Swing_Rate, Contact_Rate, K),
lower=list(continuous="smooth_loess"))
ggpairs(select(filter(S12a, N.x >= 2000),
Swing_Rate, Contact_Rate, BB),
lower=list(continuous="smooth_loess"))
x <- 0:10
dpois(x, 4)
sum(dpois(x, 4))
dpois(0:11, 4)
sum(dpois(0:3, 4))
dbinom(1, size=20, prob=0.03)
dpois(1, lambda=20 * 0.03)
S1 <- summarize(group_by(All_Data, batter_name),
y=sum(Swing), N=n())
require(LearnBayes)
fit1 <- laplace(betabinexch, c(0, 0), cbind(S1$y, S1$N))
S2 <- summarize(group_by(All_Data, batter_name),
y=sum(Swing * (1 - Swing.No.Contact)),
N=sum(Swing))
fit2 <- laplace(betabinexch, c(0, 0), cbind(S2$y, S2$N))
S3 <- summarize(group_by(filter(All_Data,
complete.cases(All_Data) == TRUE),
batter_name),
y=sum(Zone), N=n())
fit3 <- laplace(betabinexch, c(0, 0), cbind(S3$y, S3$N))
library(ggplot2)
fit1$mode
fit2$mode
fit3$mode
ggplot(select(filter(S12a, N.x >= 2000),
aes(Contact_Rate, SO)) +
geom_point() + geom_smooth()
ggplot(filter(S12a, N.x >= 2000),
aes(Contact_Rate, SO)) +
geom_point() + geom_smooth()
ggplot(filter(S12a, N.x >= 2000),
aes(Contact_Rate, K)) +
geom_point() + geom_smooth()
names(S12a)
ggplot(filter(S12a, N.x >= 2000),
aes(Contact_Rate, K)) +
geom_point() + geom_smooth() +
geom_label(data = filter(S12a, N.x >= 2000, K > .3),
aes(label=batter_name))
ggplot(filter(S12a, N.x >= 2000),
aes(Contact_Rate, K)) +
geom_point() + geom_smooth() +
geom_label(data = filter(S12a, N.x >= 2000, K > .3),
aes(label=batter_name),
nudge_x = 0.05)
ggplot(filter(S12a, N.x >= 2000),
aes(Contact_Rate, K)) +
geom_point() + geom_smooth() +
geom_label(data = filter(S12a, N.x >= 2000, K > .3),
aes(label=batter_name),
nudge_x = =0.05)
ggplot(filter(S12a, N.x >= 2000),
aes(Contact_Rate, K)) +
geom_point() + geom_smooth() +
geom_label(data = filter(S12a, N.x >= 2000, K > .3),
aes(label=batter_name),
nudge_x = -0.05)
ggplot(filter(S12a, N.x >= 2000),
aes(Contact_Rate, K)) +
geom_point() + geom_smooth() +
geom_label(data = filter(S12a, N.x >= 2000, K > .3),
aes(label=batter_name),
nudge_x = -0.04) +
xlim(.5, .9)
ggplot(filter(S12a, N.x >= 2000),
aes(Contact_Rate, K)) +
geom_point() + geom_smooth() +
geom_label(data = filter(S12a, N.x >= 2000, K > .3),
aes(label=batter_name),
nudge_x = -0.045) +
xlim(.55, .9)
ggplot(filter(S12a, N.x >= 2000),
aes(Contact_Rate, K)) +
geom_point() + geom_smooth() +
geom_label(data = filter(S12a, N.x >= 2000, K > .3),
aes(label=batter_name),
nudge_x = -0.045) +
xlim(.57, .9) + ylim(.1, .37)
ggplot(filter(S12a, N.x >= 2000),
aes(Contact_Rate, K)) +
geom_point() + geom_smooth() +
geom_label(data = filter(S12a, N.x >= 2000, K > .31),
aes(label=batter_name),
nudge_x = -0.045) +
xlim(.57, .9) + ylim(.1, .37)
ggplot(filter(S12a, N.x >= 2000),
aes(Contact_Rate, K)) +
geom_point() + geom_smooth(method="lm") +
geom_label(data = filter(S12a, N.x >= 2000, K > .31),
aes(label=batter_name),
nudge_x = -0.045) +
xlim(.57, .9) + ylim(.1, .37)
lm_fit <- lm(K ~ Contact_Rate,
data=filter(S12a, N.x >= 2000))
S12_new <- filter(S12a, N.x >= 2000)
S12_new$Residual <- lm_fit$residuals
names(S12_new)
ggplot(S12_new, aes(Swing_Rate, Residual)) +
geom_point()
ggplot(S12_new, aes(Swing_Rate, Residual)) +
geom_point() +
geom_smooth(method="lm")
ggplot(S12_new, aes(Swing_Rate, Residual)) +
geom_point() +
geom_smooth(method="lm") +
geom_hline(yintercept=0, color="red")
ggplot(filter(S12a, N.x >= 2000),
aes(Contact_Rate, K)) +
geom_point() + geom_smooth(method="lm") +
geom_label(data = filter(S12a, N.x >= 2000, K > .31),
aes(label=batter_name),
nudge_x = -0.045) +
xlim(.57, .9) + ylim(.1, .37)
names(S12)
install.packages("tidyverse")
library(tidyverse)
library(BayesTestStreak)
geometric.plot()
?geometric.plot
x <- rgeom(500, prob=0.5)
s <- find.spacings(x)
geometric.plot(s$y)
geometric.plot
R.home(component = "home")
path.expand("~")
install.packages("RcppRoll")
library(RcppRoll)
y <- c(0, 1, 1, 0, 0, 0, 1, 1, 0)
roll_mean(y, 3)
library(dplyr)
df <- data.frame(AB=1:9, H=y)
mutate(df, mavg=roll_mean(H, 4))
df$mavg <- roll_mean(H, 4)
df$mavg <- roll_mean(df$H, 4)
roll_mean(y, 3)
4960.5-189.5-148.71-1000-300-8.88-69.38-249.66
